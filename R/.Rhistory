library(Rcmdr)
boxcox(lm(move~AGE60+INCOME+price,data=oj),lambda=seq(-2,2,by=.1))
library(MASS)
boxcox(lm(move~AGE60+INCOME+price,data=oj),lambda=seq(-2,2,by=.1))
install.packages("car", dependencies=TRUE)
library(car)
boxTidwell(logmove~price, data=oj, tol=0.001, max.iter=25)
summary(rr.huber <- rlm(logmove ~ AGE60 + INCOME + invprice, data=oj))
install.packages("prais",dependencies=TRUE)
library(prais)
pw <- prais_winsten(logmove ~ AGE60 + INCOME + invprice, data=oj, index=NULL)
summary(pw)
boxcox(lm(Dist~Time,data=DistTime),lambda=seq(-2,2,by=.1))
install.packages("psych",dependencies=TRUE)
library(psych)
scree(Teaching)
install.packages("benford",dependencies=TRUE)
library(benford)
install.packages("benford.analysis",dependencies=TRUE)
library(benford.analysis)
install.packages("animation",dependencies=TRUE)
library(animation)
kmeans.ani(spend,2)
kmeans.ani(spend,3)
kmeans.ani(spend,4)
kmeans.ani(spend,3)
kmeans.ani(spend,1)
kmeans.ani(driverspeed,2)
kmeans.ani(driverspeed,3)
kmeans.ani(driverspeed,3)
kmeans.ani(driverspeed,4)
save.image("C:\\Users\\hamza\\OneDrive - Syracuse University\\MAXWELL\\Spring\\BusinessAnalytics\\.RData")
q()
launch rcmdr
library(Rcmdr)
install.packages("neuralnet", dependencies = TRUE)
library(neuralnet)
titanicnet <- neuralnet(survived ~ gendernum + age, titanic, hidden=2, lifesign="minimal", linear.output=FALSE, threshold=0.01)
titanicnet$result.matrix
plot(titanicnet)
titanicnet <- neuralnet(survived ~ gendernum + age, titanic, hidden=c(4,3), lifesign="minimal", linear.output=FALSE, threshold=0.01)
plot(titanicnet)
alphabetnet <- neuralnet(LetterNum ~ p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9 + p10 + p11 + p12 + p13 + p14 + p15 + p16 + p17 + p18 + p19 + p20 + p21 + p22 + p23 + p24 + p25, alphabet, hidden=c(5,4), lifesign="minimal", linear.output=TRUE, threshold=0.01)
alphabetnet <- neuralnet(LetterNum ~ p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9 + p10 + p11 + p12 + p13 + p14 + p15 + p16 + p17 + p18 + p19 + p20 + p21 + p22 + p23 + p24 + p25, alphabet, hidden=c(5,4), lifesign="minimal", linear.output=TRUE, threshold=0.01)
plot(alphabetnet)
inputdata <- alphabet[c(1:26),c(3:27)]
inputdata <- alphabet[ ,c(3:27)]
alphabetnet.results <- compute(alphabetnet, inputdata)
alphabetnet.results$net.result
save.image("C:\\Users\\hamza\\OneDrive - Syracuse University\\MAXWELL\\Spring\\BusinessAnalytics\\session10s")
q()
library(Rcmdrr)
install.packages("Rcmdr")
install.packages("foreign")
install.packages("ggplot2")
install.packages("MASS")
install.packages("Hmisc")
install.packages("reshape2")
library(Rcmdr)
library(foreign)
library(ggplot2)
library(MASS)
library(Hmisc)
library(reshape2)
 <- polr(SCALEE ~ MONEYPY + HOUSEHOLDER_RACE, 
          data    = Clean_RECS2020, 
          Hess    = TRUE)
m <- polr(SCALEE ~ MONEYPY + HOUSEHOLDER_rACE, data = Clean_RECS2020, Hess=TRUE)
> m <- polr(SCALEE ~ MONEYPY + HOUSEHOLDER_rACE, data = Clean_RECS2020, Hess=TRUE)
m <- polr(SCALEE ~ MONEYPY + HOUSEHOLDER_RACE, data = Clean_RECS2020, Hess=TRUE)
Clean_RECS2020$SCALEE <- factor(
  Clean_RECS2020$SCALEE,
  levels = c(0, 1, 2, 3),
  ordered = TRUE
)
m <- polr(SCALEE ~ MONEYPY + HOUSEHOLDER_RACE, data = Clean_RECS2020, Hess=TRUE)
SUMMARY(M)
summary(m)
(ctable <- coef(summary(m)))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
(ctable <- cbind(ctable, "p value" = p))
newdat <- expand.grid(
  MONEYPY          = levels(Clean_RECS2020$MONEYPY),
  HOUSEHOLDER_RACE = levels(Clean_RECS2020$HOUSEHOLDER_RACE)
)
newdat <- cbind(
  newdat,
  predict(m, newdat, type = "probs")
)
newdat <- expand.grid(
  MONEYPY          = levels(Clean_RECS2020$MONEYPY),
  HOUSEHOLDER_RACE = levels(Clean_RECS2020$HOUSEHOLDER_RACE),
  KEEP.OUT.ATTRS   = FALSE,
  stringsAsFactors = FALSE
)
newdat$MONEYPY <- factor(
  newdat$MONEYPY,
  levels  = levels(Clean_RECS2020$MONEYPY),
  ordered = TRUE
)
newdat$HOUSEHOLDER_RACE <- factor(
  newdat$HOUSEHOLDER_RACE,
  levels = levels(Clean_RECS2020$HOUSEHOLDER_RACE)
)
# now predict
probs <- predict(m, newdata = newdat, type = "probs")
# bind them on
newdat_with_probs <- cbind(newdat, probs)
# 1. Inspect the classes in your original data
str(Clean_RECS2020$MONEYPY)
str(Clean_RECS2020$HOUSEHOLDER_RACE)
# 2. Build the grid (as before)
newdat <- expand.grid(
  MONEYPY          = levels(Clean_RECS2020$MONEYPY),
  HOUSEHOLDER_RACE = levels(Clean_RECS2020$HOUSEHOLDER_RACE),
  KEEP.OUT.ATTRS   = FALSE,
  stringsAsFactors = FALSE
)
# 3. Convert to the same factor types:
#    – MONEYPY was an **ordered** factor in your fit
newdat$MONEYPY <- factor(
  newdat$MONEYPY,
  levels  = levels(Clean_RECS2020$MONEYPY),
  ordered = TRUE
)
#    – HOUSEHOLDER_RACE was an (unordered) factor
newdat$HOUSEHOLDER_RACE <- factor(
  newdat$HOUSEHOLDER_RACE,
  levels = levels(Clean_RECS2020$HOUSEHOLDER_RACE)
)
# 4. Double‑check
str(newdat)
# 5. Now predict
probs <- predict(m, newdata = newdat, type = "probs")
head(probs)
# 1. Convert your originals to proper factors (once, at the top of your script)
Clean_RECS2020$MONEYPY <- factor(
  Clean_RECS2020$MONEYPY,
  levels = 1:16,           # your 16 income codes
  labels = c(
    "Less than $5,000","$5,000 - $7,499","$7,500 - $9,999",
    "$10,000 - $12,499","$12,500 - $14,999","$15,000 - $19,999",
    "$20,000 - $24,999","$25,000 - $29,999","$30,000 - $34,999",
    "$35,000 - $39,999","$40,000 - $49,999","$50,000 - $59,999",
    "$60,000 - $74,999","$75,000 - $99,999","$100,000 - $149,999",
    "$150,000 or more"
  ),
  ordered = TRUE
)
Clean_RECS2020$HOUSEHOLDER_RACE <- factor(
  Clean_RECS2020$HOUSEHOLDER_RACE,
  levels = 1:6,
  labels = c(
    "White Alone","Black Alone","Am. Indian/Alaska Native",
    "Asian Alone","Pacific Islander","Two or More Races"
  )
)
str(Clean_RECS2020$MONEYPY)
str(Clean_RECS2020$HOUSEHOLDER_RACE)
# 2. Create every income × race combo
newdat <- expand.grid(
  MONEYPY          = levels(Clean_RECS2020$MONEYPY),
  HOUSEHOLDER_RACE = levels(Clean_RECS2020$HOUSEHOLDER_RACE),
  KEEP.OUT.ATTRS   = FALSE,
  stringsAsFactors = FALSE
)
# 3. Turn those back into factors with the exact same levels
newdat$MONEYPY <- factor(
  newdat$MONEYPY,
  levels  = levels(Clean_RECS2020$MONEYPY),
  ordered = TRUE
)
newdat$HOUSEHOLDER_RACE <- factor(
  newdat$HOUSEHOLDER_RACE,
  levels = levels(Clean_RECS2020$HOUSEHOLDER_RACE)
)
# 4. Predict the class‐probabilities
probs   <- predict(m, newdata = newdat, type = "probs")
# 5. Combine into one table
newdat_with_probs <- cbind(newdat, probs)
# 6. Inspect
head(newdat_with_probs)
# 1. Build the grid of all income × race combos
newdat <- expand.grid(
  MONEYPY          = levels(Clean_RECS2020$MONEYPY),
  HOUSEHOLDER_RACE = levels(Clean_RECS2020$HOUSEHOLDER_RACE),
  KEEP.OUT.ATTRS   = FALSE,
  stringsAsFactors = FALSE
)
# 2. Make sure they’re the same factor types as your model
newdat$MONEYPY <- factor(
  newdat$MONEYPY,
  levels  = levels(Clean_RECS2020$MONEYPY),
  ordered = TRUE
)
newdat$HOUSEHOLDER_RACE <- factor(
  newdat$HOUSEHOLDER_RACE,
  levels = levels(Clean_RECS2020$HOUSEHOLDER_RACE)
)
# 3. Predict the probabilities for each SCALEE level
newdat <- cbind(newdat, predict(m, newdat, type = "probs"))
# 4. Melt into long form for ggplot
library(reshape2)
lnewdat <- melt(
  newdat,
  id.vars        = c("MONEYPY", "HOUSEHOLDER_RACE"),
  variable.name  = "Level",
  value.name     = "Probability"
)
# 5. Quick check
head(lnewdat)
# 6. Plot with ggplot2
library(ggplot2)
ggplot(lnewdat, aes(x = MONEYPY, y = Probability, colour = Level, group = Level)) +
  geom_line() +
  facet_grid(. ~ HOUSEHOLDER_RACE, labeller = label_both) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  ) +
  labs(
    x = "Income Bracket",
    title = "Predicted Probability of Disconnect Frequency by Income & Race"
  )
# ─── 0. Libraries ───
library(MASS)      # for polr
library(reshape2)  # for melt
library(ggplot2)   # for plotting
# ─── 1. Load & prepare your data ───
Clean_RECS2020 <- read.csv("cleaned_data2020.csv")
# 1a. Convert SCALEE to an ordered factor
Clean_RECS2020$SCALEE <- factor(
  Clean_RECS2020$SCALEE,
  levels  = c(0,1,2,3),
  ordered = TRUE
)
# 1b. Convert MONEYPY to an ordered factor with the exact 16 levels
Clean_RECS2020$MONEYPY <- factor(
  Clean_RECS2020$MONEYPY,
  levels = 1:16,
  labels = c(
    "Less than $5,000","$5,000 - $7,499","$7,500 - $9,999",
    "$10,000 - $12,499","$12,500 - $14,999","$15,000 - $19,999",
    "$20,000 - $24,999","$25,000 - $29,999","$30,000 - $34,999",
    "$35,000 - $39,999","$40,000 - $49,999","$50,000 - $59,999",
    "$60,000 - $74,999","$75,000 - $99,999","$100,000 - $149,999",
    "$150,000 or more"
  ),
  ordered = TRUE
)
# 1c. Convert HOUSEHOLDER_RACE to a (unordered) factor with 6 levels
Clean_RECS2020$HOUSEHOLDER_RACE <- factor(
  Clean_RECS2020$HOUSEHOLDER_RACE,
  levels = 1:6,
  labels = c(
    "White Alone","Black Alone","Am. Indian/Alaska Native",
    "Asian Alone","Pacific Islander","Two+ Races"
  )
)
# ─── 2. Fit the ordered‐logit ───
m <- polr(
  SCALEE ~ MONEYPY + HOUSEHOLDER_RACE,
  data = Clean_RECS2020,
  Hess = TRUE
)
# ─── 3. Build the prediction grid ───
newdat <- expand.grid(
  MONEYPY          = levels(Clean_RECS2020$MONEYPY),
  HOUSEHOLDER_RACE = levels(Clean_RECS2020$HOUSEHOLDER_RACE),
  KEEP.OUT.ATTRS   = FALSE,
  stringsAsFactors = FALSE
)
# 3a. Re‑cast them as factors with the same levels
newdat$MONEYPY <- factor(
  newdat$MONEYPY,
  levels  = levels(Clean_RECS2020$MONEYPY),
  ordered = TRUE
)
newdat$HOUSEHOLDER_RACE <- factor(
  newdat$HOUSEHOLDER_RACE,
  levels = levels(Clean_RECS2020$HOUSEHOLDER_RACE)
)
# ─── 4. Predict the 4 probabilities ───
probs <- predict(m, newdata = newdat, type = "probs")
# 4a. Bind them on
newdat <- cbind(newdat, probs)
# ─── 5. Melt for ggplot ───
lnewdat <- melt(
  newdat,
  id.vars       = c("MONEYPY","HOUSEHOLDER_RACE"),
  variable.name = "SCALEE_Level",
  value.name    = "Probability"
)
# ─── 6. Plot ───
ggplot(lnewdat,
       aes(x = MONEYPY, y = Probability, colour = SCALEE_Level, group = SCALEE_Level)) +
  geom_line() +
  facet_grid(. ~ HOUSEHOLDER_RACE, labeller = label_both) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  ) +
  labs(
    x     = "Income Bracket",
    title = "Predicted Probability of Disconnect Frequency by Income & Race"
  )
getwd()
setwd("C:/Users/hamza/OneDrive/Documents/GH_PAI789/policy-data-insight")
Clean_RECS2020 <- read.csv("cleaned_data2020.csv", stringsAsFactors = FALSE)
nrow(Clean_RECS2020)   # you should see a positive number of rows
head(Clean_RECS2020)   # preview the first few records
# Convert to factors
Clean_RECS2020$SCALEE <- factor(Clean_RECS2020$SCALEE, levels=0:3, ordered=TRUE)
Clean_RECS2020$MONEYPY <- factor(
  Clean_RECS2020$MONEYPY, 
  levels=1:16, 
  labels=c("Less than $5,000",…,"$150,000 or more"),
  ordered=TRUE
)
Clean_RECS2020$HOUSEHOLDER_RACE <- factor(
  Clean_RECS2020$HOUSEHOLDER_RACE, 
  levels=1:6,
  labels=c("White Alone","Black Alone",…,"Two+ Races")
)
# Fit the model
library(MASS)
m <- polr(SCALEE ~ MONEYPY + HOUSEHOLDER_RACE, data=Clean_RECS2020, Hess=TRUE)
summary(m)
newdat <- expand.grid(
  MONEYPY          = levels(Clean_RECS2020$MONEYPY),
  HOUSEHOLDER_RACE = levels(Clean_RECS2020$HOUSEHOLDER_RACE),
  KEEP.OUT.ATTRS   = FALSE,
  stringsAsFactors = FALSE
)
# cast back to factors
newdat$MONEYPY <- factor(newdat$MONEYPY, levels=levels(Clean_RECS2020$MONEYPY), ordered=TRUE)
newdat$HOUSEHOLDER_RACE <- factor(newdat$HOUSEHOLDER_RACE, levels=levels(Clean_RECS2020$HOUSEHOLDER_RACE))
# predict
probs <- predict(m, newdata=newdat, type="probs")
newdat <- cbind(newdat, probs)
# reshape & plot (as before)
library(reshape2); library(ggplot2)
lnewdat <- melt(newdat, id.vars=c("MONEYPY","HOUSEHOLDER_RACE"), variable.name="SCALEE", value.name="Probability")
ggplot(lnewdat, aes(x=MONEYPY, y=Probability, colour=SCALEE, group=SCALEE)) +
  geom_line() + facet_grid(.~HOUSEHOLDER_RACE, labeller=label_both) +
  theme(axis.text.x=element_text(angle=45,hjust=1), legend.position="bottom") +
  labs(x="Income", title="Predicted Disconnect Frequency by Income & Race")
  theme(axis.text.x=element_text(angle=45,hjust=1), legend.position="bottom") +
# 1. Build a pure numeric grid (1:16 and 1:6)
newdat <- expand.grid(
  MONEYPY          = 1:16,
  HOUSEHOLDER_RACE = 1:6
)
# 2. Get the 4 class‑probabilities
probs <- predict(m, newdata = newdat, type = "probs")
# 3. Combine into one table
newdat_with_probs <- cbind(newdat, probs)
# 4. Melt to long form
library(reshape2)
lnewdat <- melt(
  newdat_with_probs,
  id.vars        = c("MONEYPY", "HOUSEHOLDER_RACE"),
  variable.name  = "SCALEE_Level",
  value.name     = "Probability"
)
# 5. (Optional) turn the numeric codes into pretty factors for plotting
lnewdat$IncomeBracket <- factor(
  lnewdat$MONEYPY,
  levels = 1:16,
  labels = c(
    "Less than $5,000","$5,000–7,499","$7,500–9,999","$10,000–12,499",
    "$12,500–14,999","$15,000–19,999","$20,000–24,999","$25,000–29,999",
    "$30,000–34,999","$35,000–39,999","$40,000–49,999","$50,000–59,999",
    "$60,000–74,999","$75,000–99,999","$100,000–149,999","$150,000+"
  ),
  ordered = TRUE
)
lnewdat$RaceLabel <- factor(
  lnewdat$HOUSEHOLDER_RACE,
  levels = 1:6,
  labels = c(
    "White Alone","Black Alone","Am. Indian/AK Native",
    "Asian Alone","Pacific Isl.","Two+ Races"
  )
)
# 6. Plot
library(ggplot2)
ggplot(lnewdat,
       aes(x = IncomeBracket, y = Probability, colour = SCALEE_Level, group = SCALEE_Level)) +
  geom_line() +
  facet_grid(. ~ RaceLabel, labeller = label_both) +
  theme(
    axis.text.x  = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  ) +
  labs(
    x     = "Income Bracket",
    title = "Predicted Disconnect‑Notice Frequency by Income & Race"
  )
# 1. Load your data and fit the model (once)
Clean_RECS2020 <- read.csv("cleaned_data2020.csv", stringsAsFactors=FALSE)
Clean_RECS2020$SCALEE <- factor(Clean_RECS2020$SCALEE, levels=0:3, ordered=TRUE)
# Note: we’re leaving MONEYPY and RACE as numeric doubles
library(MASS)
m <- polr(SCALEE ~ MONEYPY + HOUSEHOLDER_RACE, data=Clean_RECS2020, Hess=TRUE)
# 2. Build a purely numeric grid (1:16, 1:6)
newdat <- expand.grid(
  MONEYPY          = 1:16,  # integer → will coerce to integer, so we fix it next
  HOUSEHOLDER_RACE = 1:6
)
# 3. Make them numeric doubles to match the model’s predictors
newdat$MONEYPY          <- as.numeric(newdat$MONEYPY)
newdat$HOUSEHOLDER_RACE <- as.numeric(newdat$HOUSEHOLDER_RACE)
# 4. Predict the four class‐probabilities
probs <- predict(m, newdata=newdat, type="probs")
# 5. Combine into one data frame
newdat_with_probs <- cbind(newdat, probs)
# 6. Melt to long form for ggplot
library(reshape2)
lnewdat <- melt(
  newdat_with_probs,
  id.vars       = c("MONEYPY", "HOUSEHOLDER_RACE"),
  variable.name = "SCALEE_Level",
  value.name    = "Probability"
)
# 7. (Optional) Turn the numeric codes into nicer factor labels
lnewdat$IncomeBracket <- factor(
  lnewdat$MONEYPY,
  levels = 1:16,
  labels = c(
    "Less than $5,000","$5,000–7,499","$7,500–9,999","$10,000–12,499",
    "$12,500–14,999","$15,000–19,999","$20,000–24,999","$25,000–29,999",
    "$30,000–34,999","$35,000–39,999","$40,000–49,999","$50,000–59,999",
    "$60,000–74,999","$75,000–99,999","$100,000–149,999","$150,000+"
  ),
  ordered = TRUE
)
lnewdat$RaceLabel <- factor(
  lnewdat$HOUSEHOLDER_RACE,
  levels = 1:6,
  labels = c(
    "White Alone","Black Alone","Am. Indian/AK Native",
    "Asian Alone","Pacific Isl.","Two+ Races"
  )
)
# 8. Plot with ggplot2
library(ggplot2)
ggplot(lnewdat, aes(x = IncomeBracket, y = Probability, colour = SCALEE_Level, group = SCALEE_Level)) +
  geom_line() +
  facet_grid(. ~ RaceLabel, labeller = label_both) +
  theme(
    axis.text.x     = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  ) +
  labs(
    x     = "Income Bracket",
    title = "Predicted Probability of Disconnect‑Notice Frequency\nby Income & Race"
  )
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8))
library(ggplot2)
library(stringr)
ggplot(lnewdat,
       aes(x = IncomeBracket, y = Probability, 
           colour = SCALEE_Level, group = SCALEE_Level)) +
  geom_line(size = 1) +
  facet_wrap(~ RaceLabel, nrow = 2, ncol = 3) +
  scale_colour_brewer(palette = "Set2", name = "Disconnect Level") +
  scale_x_discrete(labels = function(x) str_wrap(x, width = 8)) +
  theme_light(base_size = 14) +
  theme(
    strip.text        = element_text(face = "bold", size = 12),
    axis.text.x       = element_text(angle = 45, hjust = 1),
    legend.position   = "top",
    panel.grid.minor  = element_blank()
  ) +
  labs(
    x     = "Income Bracket",
    y     = "Predicted Probability",
    title = "Predicted Disconnect Notice Frequency by Income & Race"
  )
q()
